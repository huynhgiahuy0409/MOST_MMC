<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="vesselScheduleInternal">
	
	<resultMap id="ConfirmationSlipDetailMap" type="vesselScheduleItem">
    	<result property="vslCallId"         column="VSLCALLID"/>
		<result property="seq"               column="SEQ"/>
		<result property="cgTpCd"            column="CGTPCD"/>
		<result property="opeTpCd"           column="OPETPCD"/>
		<result property="cgTpNm"            column="CGTPNM"/>
		<result property="cmdtCd"            column="CMDTCD"/>
		<result property="cmdtCdNm"          column="CMDTCDNM"/>
		<result property="opeHr"             column="OPEHR"/>
		<result property="workDd"            column="WORKDD"/>
		<result property="workHatchNo"       column="WORKHATCHNO"/>
		<result property="wgt"               column="WGT"/>
		<result property="msrmt"             column="MSRMT"/>
		<result property="qty"               column="QTY"/>
		<result property="pkgTpCd"           column="PKGTPCD"/>
		<result property="clnCd"             column="CLNCD"/>
		<result property="topCgCd"           column="TOPCGCD"/>
		<result property="topCln"            column="TOPCLN"/>
		<result property="tmnlOpr"           column="TMNLOPR"/>
		<result property="shprCnsne"         column="SHPRCNSNE"/>
		<result property="cnsne" 			 column="CNSNE"/>
		<result property="unno"              column="UNNO"/>
		<result property="imdg"              column="IMDG"/>
		<result property="pol"             	 column="POL"/>
		<result property="fdest"             column="FDEST"/>
		<result property="crc"               column="CRC"/>
		<result property="tkNo"              column="TKNO"/>
		<result property="blNo"              column="BLNO"/>
		<result property="cgOptTpCd"         column="CGOPTTPCD"/>
		<result property="cgOptTpNm"         column="CGOPTTPNM"/>
		<result property="dgSeq"         	 column="DGSEQ"/>
		<result property="dgChk"         	 column="DGCHK"/>
		<result property="opeType"         	 column="OPETYPE"/>
		<result property="cnsneNm"         	 column="CNSNENM"/>
		<result property="cnsneAddr"         column="CNSNEADDR"/>
		<result property="shpNm"         	 column="SHPNM"/>
		<result property="shpAddr"         	 column="SHPADDR"/>
		<result property="pkgTpNm"         	 column="PKGTPNM"/>
		<result property="remark"         	 column="REMARK"/>
		<result property="delvTpCd"          column="DELVTPCD"/>
		<result property="delvTpNm"			 column="DELVTPNM"/>
    </resultMap>

	<sql id="berth3HrsComCondition">
		AND (
			EXISTS (
				SELECT 1 
				FROM TMT_VSL_SCH C
                WHERE C.ATB IS NULL
                AND C.ETB IS NOT NULL
                AND (C.ETB BETWEEN (SYSDATE-30) AND SYSDATE+3/(24))
                AND C.ETB BETWEEN A.ATB 
                AND ( 
                	CASE 
                		WHEN A.ATU IS NOT NULL THEN A.ATU
                        WHEN A.ETU IS NOT NULL THEN A.ETU
                        WHEN A.ETD IS NOT NULL THEN A.ETD
                    END
				)
	            AND NVL(
	            	(
	            		SELECT BERTH_TP 
	            		FROM TMT_BERTH_LOC
	                    WHERE LOC_CD = 'BBT'
	                    AND BERTH_TP IS NOT NULL
	                    AND BERTH_CD = C.BERTH_LOC
					), ''
				) = NVL(
					(
						SELECT BERTH_TP 
						FROM TMT_BERTH_LOC
	                    WHERE LOC_CD = 'BBT'
	                    AND BERTH_TP IS NOT NULL
	                    AND BERTH_CD = A.BERTH_LOC
					), '')
				AND (
                   	A.BERTH_LOC = C.BERTH_LOC 
                   	OR A.WHARF_MARK_FROM BETWEEN C.WHARF_MARK_FROM AND C.WHARF_MARK_TO
                    OR A.WHARF_MARK_TO BETWEEN C.WHARF_MARK_FROM AND C.WHARF_MARK_TO 
				)
			) 
	        OR EXISTS (
	        	SELECT 1 
	        	FROM (
	        		SELECT 
	        			VSL_CALL_ID, 
	        			MAX(SEQ) AS SEQ 
	        		FROM TMT_VSL_SHFT D
	                WHERE D.ATB_DT IS NULL
	                AND D.ETB_DT IS NOT NULL
	                GROUP BY VSL_CALL_ID
				) D, TMT_VSL_SHFT E
				WHERE D.VSL_CALL_ID = E.VSL_CALL_ID
		        AND D.SEQ = E.SEQ
		        AND (E.ETB_DT BETWEEN (SYSDATE-30) AND SYSDATE+3/(24))
		        AND E.ETB_DT BETWEEN A.ATB 
		        AND (
		        	CASE 
		        		WHEN A.ATU IS NOT NULL THEN A.ATU
						WHEN A.ETU IS NOT NULL THEN A.ETU
						WHEN A.ETD IS NOT NULL THEN A.ETD
					END
				)
            	AND NVL(
            		(
            			SELECT BERTH_TP 
            			FROM TMT_BERTH_LOC
	                    WHERE LOC_CD = 'BBT'
	                    AND BERTH_TP IS NOT NULL
	                    AND BERTH_CD = NVL(
	                    	E.PLAN_BERTH_NO, 
	                    	NVL(E.NX_BERTH_NO, E.PREV_BERTH_NO)
	                    )
					), '') = NVL(
						(
							SELECT BERTH_TP 
							FROM TMT_BERTH_LOC
	                        WHERE LOC_CD = 'BBT'
	                        AND BERTH_TP IS NOT NULL
	                        AND BERTH_CD = A.BERTH_LOC
					), '')
				AND (
                 	A.BERTH_LOC = NVL(E.PLAN_BERTH_NO, NVL(E.NX_BERTH_NO, E.PREV_BERTH_NO))
					OR A.WHARF_MARK_FROM BETWEEN NVL(E.PLAN_WHARF_MARK_FM, E.WHARF_MARK_FM) AND NVL(E.PLAN_WHARF_MARK_TO, E.WHARF_MARK_TO)
					OR A.WHARF_MARK_TO BETWEEN NVL(E.PLAN_WHARF_MARK_FM, E.WHARF_MARK_FM) AND NVL(E.PLAN_WHARF_MARK_TO, E.WHARF_MARK_TO) 
               	)
			)
		)	 
	</sql>
	    
    <sql id="berth3HrsJpvcs">
        SELECT 
        	A.VSL_CALL_ID AS VSLCALLID
        FROM TMT_VSL_SCH A
        WHERE A.ATB IS NOT NULL
		AND (A.ATB BETWEEN (SYSDATE-30) AND SYSDATE)
		AND NOT EXISTS (SELECT 1 FROM TMT_VSL_SHFT B WHERE B.VSL_CALL_ID = A.VSL_CALL_ID)
		<include refid="berth3HrsComCondition"/>
        UNION ALL	 
        SELECT A.VSL_CALL_ID AS VSLCALLID
        FROM (
        	SELECT 
        		H.VSL_CALL_ID 	AS VSL_CALL_ID,
				H.ATB_DT 		AS ATB,
				H.ATU_DT 		AS ATU,
				H.ETU_DT 		AS ETU,
				I.ETD    		AS ETD,
				H.BERTH_LOC,
				H.WHARF_MARK_FROM,
				H.WHARF_MARK_TO
			FROM (
				SELECT 
					G.VSL_CALL_ID,
					G.ATB_DT,
					G.ATU_DT,
					G.ETU_DT,
					NVL(G.PLAN_BERTH_NO, NVL(G.NX_BERTH_NO, G.PREV_BERTH_NO)) AS BERTH_LOC,
					NVL(G.PLAN_WHARF_MARK_FM, G.WHARF_MARK_FM) AS WHARF_MARK_FROM,
 				    NVL(G.PLAN_WHARF_MARK_TO, G.WHARF_MARK_TO) AS WHARF_MARK_TO
				FROM ( SELECT VSL_CALL_ID, MAX(SEQ) SEQ FROM TMT_VSL_SHFT F
				WHERE F.ATB_DT IS NOT NULL GROUP BY VSL_CALL_ID ) F, TMT_VSL_SHFT G
				WHERE G.VSL_CALL_ID = F.VSL_CALL_ID
				AND G.SEQ = F.SEQ
				AND (G.ATB_DT BETWEEN (SYSDATE-30) AND SYSDATE)
			) H, TMT_VSL_SCH I
			WHERE H.VSL_CALL_ID = I.VSL_CALL_ID
		) A 
		WHERE (A.ATB BETWEEN (SYSDATE-30) AND SYSDATE) 
		<include refid="berth3HrsComCondition"/>
    </sql>

	<sql id="vesselSchedule">
        SELECT DISTINCT
			A.VSL_CD                VSLCD, 
			A.CALL_YEAR             CALLYEAR,
			A.CALL_SEQ              CALLSEQ,
			B.VSL_NM                VSLNM,
			A.VSL_CALL_ID           VSLCALLID,
			F_CM_012('VC', 'VSLTP', B.VSL_TP) AS VSLTPNM,
			F_GET_ISSNO (A.VSL_CD) AS isscNo,
			F_GET_IMONO(A.VSL_CD ) AS IMONO,
			A.BERTH_PLAN_YN         BERTHPLANYN,
			A.ETA AS   ETA,
			LPAD(EXTRACT(DAY FROM A.ETA),2,'0') || '/' || LPAD(EXTRACT(MONTH FROM A.ETA),2,'0') AS ETADAYMONTH,
			TO_CHAR(A.ETA, 'HH24:MI') AS ETAHOUR,
			A.ETD AS   ETD,
			A.ETB AS   ETB,
			A.ATA AS   ATA,
			A.ATB AS   ATB,
			A.ATU AS   ATU,
			TO_CHAR(A.UPDATE_TIME,'DD/MM/YYYY HH24:MI')    INSDTM,
			(
				CASE 
					WHEN (
						(
							NVL(A.DG_GOOD_YN,'N') NOT IN 'Y' AND (
								(((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ >= ]]> 48 AND C.SUMIT_DT IS NULL)
	                            OR
								(((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ >= ]]> 48 AND ((A.ETA-C.SUMIT_DT)*24) <![CDATA[ >= ]]> 24)
							)
						)
						OR
						(
						    NVL(A.DG_GOOD_YN,'N') IN 'Y' AND (
						    	(A.ETA-A.UPDATE_TIME) <![CDATA[ < ]]> 30 OR (A.ETA-A.UPDATE_TIME) <![CDATA[ > ]]> 45 )
							AND (
						    	(((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ >= ]]> 48 AND C.SUMIT_DT IS NULL)
								OR
						     	(((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ >= ]]> 48 AND ((A.ETA-C.SUMIT_DT)*24) <![CDATA[ >= ]]> 24)
						    )
						)
					) THEN 'NORMAL MATURED'
					WHEN (
						(
                            NVL(A.DG_GOOD_YN,'N') NOT IN 'Y' AND (
                                (((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ < ]]> 48 AND C.SUMIT_DT IS NULL)
                            	OR
								(((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ < ]]> 48 OR ((A.ETA-C.SUMIT_DT)*24) <![CDATA[ < ]]> 24)
                            )
                        )
                        OR    
                        (
                            NVL(A.DG_GOOD_YN,'N') IN 'Y' AND (
                            	(A.ETA-A.UPDATE_TIME) <![CDATA[ < ]]> 30 OR (A.ETA-A.UPDATE_TIME) <![CDATA[ > ]]> 45 
                            ) 
                           	AND (
                               	(((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ < ]]> 48 AND C.SUMIT_DT IS NULL)
                           		OR
                               	(((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ < ]]> 48 OR ((A.ETA-C.SUMIT_DT)*24) <![CDATA[ < ]]> 24)
                           	)
						)
					) THEN 'NORMAL NON-MATURED'
					WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y' 
						AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45 
						AND C.SUMIT_DT IS NULL 
					THEN 'SCHEDULE'
					WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y' 
						AND C.SUMIT_DT IS NOT NULL 
						AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45
						AND A.ETA-C.SUMIT_DT <![CDATA[ >= ]]> 3                                             
					THEN 'SCHEDULE MATURED'
					WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y'       
						AND C.SUMIT_DT IS NOT NULL  
						AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45
						AND A.ETA-C.SUMIT_DT <![CDATA[ < ]]> 3                      
					THEN 'SCHEDULE NON MATURED'
					ELSE 'NORMAL MATURED'
                END
			) AS STATUS,
			(
				CASE 
                     WHEN (
                     	(
                            NVL(A.DG_GOOD_YN,'N') NOT IN 'Y' 
                            AND (
                                (((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ >= ]]> 48 AND C.SUMIT_DT IS NULL)
                            	OR
                                (((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ >= ]]> 48 AND ((A.ETA-C.SUMIT_DT)*24) <![CDATA[ >= ]]> 24)
                            )
                        )
                        OR
                        (
                            NVL(A.DG_GOOD_YN,'N') IN 'Y' 
                            AND ( (A.ETA-A.UPDATE_TIME) <![CDATA[ < ]]> 30 OR (A.ETA-A.UPDATE_TIME) <![CDATA[ > ]]> 45 )
                            AND (
                                (((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ >= ]]> 48 AND C.SUMIT_DT IS NULL)
                            	OR
                                 (((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ >= ]]> 48 AND ((A.ETA-C.SUMIT_DT)*24) <![CDATA[ >= ]]> 24)
                            	)
                        	)
                        ) THEN 'NRM'
					WHEN (
						(
                            NVL(A.DG_GOOD_YN,'N') NOT IN 'Y' AND (
                                (((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ < ]]> 48 AND C.SUMIT_DT IS NULL)
                            	OR
								(((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ < ]]> 48 OR ((A.ETA-C.SUMIT_DT)*24) <![CDATA[ < ]]> 24)
                            )
                        )             
                        OR    
                        (
                            NVL(A.DG_GOOD_YN,'N') IN 'Y'    
                            AND ( (A.ETA-A.UPDATE_TIME) <![CDATA[ < ]]> 30 OR (A.ETA-A.UPDATE_TIME) <![CDATA[ > ]]> 45 )
                            AND (
                                (((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ < ]]> 48 AND C.SUMIT_DT IS NULL)
                            	OR
                                (((A.ETA-A.UPDATE_TIME)*24) <![CDATA[ < ]]> 48 OR ((A.ETA-C.SUMIT_DT)*24) <![CDATA[ < ]]> 24)
                            )                     
                        )
					) THEN 'NNM'
                    WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y' 
						AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45 
						AND C.SUMIT_DT IS NULL
					THEN 'SCH'
                    WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y'       
						AND C.SUMIT_DT IS NOT NULL  
						AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45
						AND A.ETA-C.SUMIT_DT <![CDATA[ >= ]]> 3                                             
					THEN 'SLM'
					WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y'       
						AND C.SUMIT_DT IS NOT NULL  
						AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45
						AND A.ETA-C.SUMIT_DT <![CDATA[ < ]]> 3                      
					THEN 'SNM'
                    ELSE 'NRM'
                END
			) AS SCHSTATUS,
            DECODE(A.SUMMIT_STAT, 'RC', '','CC','Cancelled',F_CM_012('MT', 'DOCSTAT', A.SUMMIT_STAT)) SUMMITSTATNAME,
            A.BERTH_APRV_USER_ID    BERTHAPRVUSERID,
			(SELECT MAX(DTL.UPDATE_TIME) FROM TMT_CONFM_SLP_DTL DTL WHERE DTL.VSL_CALL_ID = C.VSL_CALL_ID) SUMITDT,
			(
				SELECT 
					DECODE(DTL.SUMDT,NULL,'N','Y')
				FROM (
					SELECT MAX(DTL.UPDATE_TIME) AS SUMDT
                    FROM TMT_CONFM_SLP_DTL DTL 
                    WHERE DTL.VSL_CALL_ID = C.VSL_CALL_ID
                ) DTL
			) AS CSSTATUS,
			A.ARRV_SA_ID            ARRVSAID,
			A.STAFF_CD SALOGINID,
			A.BERTH_LOC             BERTHLOC,
			F_GET_OPE_TP(A.VSL_CALL_ID) OPERATIONTYPE,
			<choose>
				<when test="rptNm== 'shipsch'">
				</when>
				<otherwise>
					F_GET_COMODITY( A.VSL_CALL_ID)                              AS comodityCode,
				</otherwise>
			</choose>
			DECODE(F_GET_OPE_TP(A.VSL_CALL_ID), 'Loading and Discharging','L/D','Loading Only','L','D') ldStatus,
			F_CM_012('MT', 'CGTP', A.CARGO_TP) CARGOTP,
			B.GRT                   GRT,
			B.DWT                   DWT,
			(SELECT SUM(CG_WGT) WGT FROM TMT_CONFM_SLP_DTL WHERE VSL_CALL_ID = A.VSL_CALL_ID) MT,
			(SELECT SUM(OPE_HR) FROM TMT_CONFM_SLP_DTL WHERE VSL_CALL_ID = A.VSL_CALL_ID) OPEHR,
			A.DG_GOOD_YN    DGGOODYN,
			F_GET_DG_DECLARATION(A.VSL_CALL_ID, A.VSL_CD, A.CALL_YEAR, A.CALL_SEQ, B.VSL_TP) DGDECLARATION,
			F_GET_DG_STATUS(A.VSL_CALL_ID, A.VSL_CD, A.CALL_YEAR, A.CALL_SEQ) DGSTATUS,
			B.LOA                    LOA,
			A.DRF_ARRV              DRFARRV,
			A.DRF_DEPTR             DRFDEPTR,
			A.SHIP_CALL_NO          SHIPCALLNO,
			DECODE(C.FILE_CATG_CD, NULL, 'N', 'Y') STOWAGEPLAN,
			A.SUMMIT_STAT           SUMMITSTAT,
			B.SA_CORP_ID            SACORPID,
			CASE 
				WHEN NVL(D.CREDIT_LIMIT,0) <![CDATA[ <= ]]> 2000 THEN 'R'
				WHEN ((A.ETA - C.SUMIT_DT) * 24) <![CDATA[ <= ]]> 24 THEN 'B'
				WHEN ( SELECT NVL(COUNT(*),0)
				       FROM TMT_VSL_SCH_HIST B
				       WHERE B.VSL_CD = A.VSL_CD
					   AND B.CALL_YEAR = A.CALL_YEAR
					   AND B.CALL_SEQ = A.CALL_SEQ
					   AND B.DATA_FIELD = 'ETA')<![CDATA[ > ]]> 0 THEN 'G'
				ELSE ''
			END VSLCOLOR,
            (
            	SELECT 
            		CASE
		            	WHEN COUNT(SEQ) = 0 THEN 'N'
		            	ELSE 'Y'
	            	END 
				FROM TMT_CONFM_SLP_DTL 
				WHERE VSL_CALL_ID = A.VSL_CALL_ID
			) AS ISCS1,
            (
            	SELECT 
            		CASE 
                        WHEN COUNT(*) > 0 THEN 'Y'
                        ELSE 'N'
                    END 
                FROM TMT_B_IV_ADV
                WHERE VSL_CALL_ID = A.VSL_CALL_ID
			) AS isIvAdv,
			A.BERTH_LABEL AS berthLabel,
			(
				SELECT NVL(SUM(CG_WGT), 0) 
              	FROM TMT_CONFM_SLP_DTL 
              	WHERE VSL_CALL_ID = A.VSL_CALL_ID 
      			AND CG_OPT_TP_CD = 'DS'
     			<if test="rptNm== 'shipsch'">
					<choose>
					 	<when test='rptLoc== "w"'>AND CG_TP_CD NOT IN ('LQE','LQN')</when>
					 	<when test='rptLoc== "j"'>AND CG_TP_CD IN ('LQE','LQN')</when>
					</choose>
				</if>
			) AS dischargeMt,
			(
				SELECT NVL(SUM(CG_WGT), 0) 
               	FROM TMT_CONFM_SLP_DTL 
               	WHERE VSL_CALL_ID = A.VSL_CALL_ID 
       			AND CG_OPT_TP_CD = 'LD'
				<if test="rptNm== 'shipsch'">
					<choose>
					 	<when test='rptLoc== "w"'>AND CG_TP_CD NOT IN ('LQE','LQN')</when>
					 	<when test='rptLoc== "j"'>AND CG_TP_CD IN ('LQE','LQN')</when>
					</choose>
				</if>
			) AS loadingMt,
			B.VSL_WIDTH AS vslWidth,
			A.VSL_CALL_ID AS motherVslCallId,
			(SELECT DBL_BNK_SHIP1 FROM TMT_DBL_BNK BNK WHERE A.VSL_CALL_ID = BNK.VSL_CALL_ID AND ROWNUM = 1) AS dbVslCallId,
			A.DOMESTIC_CHK domesticChk
        FROM 
			 TMT_VSL_SCH A,
             TMT_VSL_PART B ,
             TMT_CONFM_SLP C,
             TMT_AGENCY_INFO D
             <if test="locCd == 'BBT' or rptNm== 'shipsch'">
             ,TMT_BERTH_LOC E
             </if>
        WHERE A.VSL_CD = B.VSL_CD 
        AND A.VSL_CALL_ID = C.VSL_CALL_ID(+)
        AND 
	        CASE 
	        WHEN B.VSL_TP NOT IN ('BRGE') THEN A.ARRV_SA_ID
	        ELSE '1'
	        END 
	        	= 
	        CASE 
	        WHEN B.VSL_TP NOT IN ('BRGE') THEN D.AGENCY_CODE
	        ELSE '1' 
	        END
	  	AND D.ptnr_type = 'SHA'
        AND A.SUMMIT_STAT &lt;&gt; 'CC'
		<if test="etaFrom != null and etaFrom != ''">
             AND A.ETA &gt;= TO_DATE(#{etaFrom},'DD/MM/YYYY')
		</if>				
		<if test="etaTo != null and etaTo != ''">
             AND A.ETA &lt; TO_DATE(#{etaTo},'DD/MM/YYYY')+1
		</if>		
		<if test="vslCallId != null and vslCallId != ''">
 			AND A.VSL_CALL_ID = #{vslCallId}
		</if>
		<if test="atdYn == 'false'">
 			AND A.ATD IS  NULL
		</if>
		<if test="locCd == 'BBT'">
			AND A.BERTH_LOC = E.BERTH_CD
			AND E.LOC_CD = 'BBT'
       	</if>	
       	<if test="rptNm== 'shipsch'">
			AND A.BERTH_LOC = E.BERTH_CD
			<choose>
				<when test='rptLoc== "w"'>AND E.BERTH_TP = 'WRF'</when>
				<when test='rptLoc== "j"'>AND E.BERTH_TP IN ('NDJ', 'EDJ')</when>
			</choose>
       	</if>	
			<if test="alertYn == null or alertYn == ''">
				<if test="vslTp != null and vslTp != ''">
	   				AND B.VSL_TP = #{vslTp}
				</if>		
				<if test="cgTpCd != null and cgTpCd != ''">
	   				AND A.CARGO_TP = #{cgTpCd}
				</if>						
				<if test="planned == 'PLN'">
	   				AND A.BERTH_PLAN_YN = 'Y'
				</if>		
				<if test="planned == 'NPN'">
	   				AND NVL(A.BERTH_PLAN_YN, 'N') = 'N'
				</if>				
				<if test="dbYn == 'true'">
	   				AND F_GET_DB_YN(A.VSL_CALL_ID) = 'Y'
				</if>
			</if>
		<if test="alertYn != null and alertYn != ''">
			<if test='alertYn == "Y"'>
	           <if test="alertTp == 'Berth32hrs'">
               		AND A.VSL_CALL_ID IN (
               			SELECT VSL_CALL_ID
						FROM TMT_VSL_SCH
						WHERE (ETA - SYSDATE)*24 &lt;= 32
			            AND ETA > SYSDATE
			            AND BERTH_PLAN_YN IS NULL
			            AND WHARF_MARK_FROM IS NULL
					)
			  </if>
			  <if test="alertTp == 'IVAdvice'">
              		AND  A.ARRV_SA_ID  = #{ptnrCode}
                    AND A.VSL_CALL_ID NOT IN (
	                    SELECT A1.VSL_CALL_ID AS VSL_CALL_ID
	                    FROM TMT_B_IV_ADV A1
	                    WHERE PTNR_CD = #{ptnrCode} OR PAYER_CD = #{ptnrCode}
                    )
                    AND (SYSDATE - A.ETA) &lt;= 180 
			  </if>
			</if>
		</if>
		<if test="ptnrCd != null and ptnrCd != ''">
			AND (A.ARRV_SA_ID = #{ptnrCd} OR A.DEPR_SA_ID = #{ptnrCd})
		</if>
		AND A.BERTH_LOC NOT IN (SELECT BERTH_CD FROM TMT_BERTH_LOC WHERE LOC_CD = 'CT')
		ORDER BY A.ETA DESC 
    </sql>
    
  	<select id="selectVesselScheduleList"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
		<if test="pageNo != 0"> 
			SELECT /*vesselScheduleInternal.selectVesselScheduleList*/
				* FROM (SELECT inner.*, rownum row_num FROM ( 
		</if>
		<include refid="getVesselScheduleList"/>
		<if test="pageNo != 0"> 
				)inner 
			)inner 
			WHERE inner.row_num <![CDATA[>]]> (TO_NUMBER(DECODE(#{pageNo},'0', '1', #{pageNo}))-1)* TO_NUMBER(#{sizePerPage}) 
					AND inner.row_num <![CDATA[<=]]> TO_NUMBER(DECODE(#{pageNo},'0', '1', #{pageNo})) * TO_NUMBER(#{sizePerPage})
		</if>
  	</select>
  	
  	<select id="selectVesselScheduleListCount"  parameterType="vesselScheduleParm" resultType="java.lang.String">
  		SELECT COUNT(*) /*vesselScheduleInternal.selectVesselScheduleListCount*/
			FROM (<include refid="getVesselScheduleList"/>)
  	</select>
  	
  	<sql id="getVesselScheduleList">
  		SELECT VCS.*
		FROM (
			<include refid="vesselSchedule"/>	
		) VCS WHERE 1 = 1
		<if test="schStatus != null and schStatus != ''">  
		    AND SCHSTATUS = #{schStatus}
		</if>
		ORDER BY ETA DESC
    </sql>

  	<select id="selectVesselScheduleReport"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
  		SELECT /*vesselScheduleInternal.selectVesselScheduleReport*/
  			A.VSL_CD VSLCD,
			ROWNUM RN,
			A.CALL_YEAR CALLYEAR,
			A.CALL_SEQ CALLSEQ,
			B.VSL_NM VSLNM,
			A.VSL_CALL_ID VSLCALLID,
			TO_CHAR (A.ETA, 'DD/MM/YYYY HH24:MI') ETA,
			TO_CHAR (A.UPDATE_TIME, 'DD/MM/YYYY HH24:MI') INSDTM,
			A.ARRV_SA_ID ARRVSAID,
			B.LOA LOA,
			B.DWT DWT,
			A.DRF_ARRV DRFARRV,
			A.DRF_DEPTR DRFDEPTR,
			DECODE (F_GET_OPE_TP (A.VSL_CALL_ID), 'Loading and Discharging', 'LD', 'Loading Only', 'L', 'D') ldStatus,
			(
				SELECT 
					SUM (CG_WGT) WGT
				FROM TMT_CONFM_SLP_DTL
				WHERE VSL_CALL_ID = A.VSL_CALL_ID
			) MT,
			F_GET_CONFIRMATIONSLIP_PTNR (A.VSL_CALL_ID, 'CNS') AS CONSIGNEE,
			F_GET_CONFIRMATIONSLIP_PTNR (A.VSL_CALL_ID, 'FWD') AS FORWARDER,
			NVL(
				(
					SELECT 
						CASE
							WHEN DOC_APPRV_STAT = 'AP' 	THEN 'APPROVE'
							WHEN DOC_APPRV_STAT = 'IP' 	THEN 'IN PROGRESS'
							WHEN DOC_APPRV_STAT = 'HL' 	THEN 'HOLD'
							WHEN DOC_APPRV_STAT = 'RJ'  THEN 'REJECT'
							ELSE 'N/A'
						END
	             	FROM TMT_CLR_DOC
	            	WHERE DOC_ID = 'AHC'
					AND (CALL_YEAR, CALL_SEQ, VSL_CD) IN (
						SELECT 
							CALL_YEAR, 
							CALL_SEQ, 
							VSL_CD
						FROM TMT_VSL_SCH
						WHERE VSL_CALL_ID = A.VSL_CALL_ID
					)
			), 'N/A') AS ogaStatus,
			NVL(
          		(
	          		SELECT 
						NVL(TO_CHAR (UPDATE_TIME, 'DD/MM/YYYY HH24:MI:SS'), 
						TO_CHAR (UPDATE_TIME, 'DD/MM/YYYY HH24:MI:SS'))
					FROM TMT_CLR_DOC
					WHERE DOC_ID = 'AHC'
					AND (CALL_YEAR, CALL_SEQ, VSL_CD) IN (
						SELECT 
							CALL_YEAR, CALL_SEQ, VSL_CD
	                    FROM TMT_VSL_SCH
	                    WHERE VSL_CALL_ID = A.VSL_CALL_ID
					)
            ), '') AS ogaStatusDate,
          	NVL(
          		(
          			SELECT 
          				CASE
	                        WHEN QUAR_ANCH = 'Y' AND QUAR_WHARF = 'N' THEN 'QUARANTINE AT ANCHORAGE'
	                        WHEN QUAR_ANCH = 'N' AND QUAR_WHARF = 'Y' THEN  'QUARANTINE AT WHARF'
                        	ELSE 'IN PROGRESS'
					 	END
					FROM TMT_CLR_DOC
					WHERE DOC_ID = 'AHC'
					AND (CALL_YEAR, CALL_SEQ, VSL_CD) IN (
						SELECT 
							CALL_YEAR, CALL_SEQ, VSL_CD
                        FROM TMT_VSL_SCH
						WHERE VSL_CALL_ID = A.VSL_CALL_ID
					)
			), 'IN PROGRESS') AS ogaQuarantine,
			(
				SELECT 
					CASE
                    	WHEN DOC_APPRV_STAT = 'AP' THEN STAFF_CD
                    	ELSE ''
                	END
            	FROM TMT_CLR_DOC
           		WHERE DOC_ID = 'AHC'
                AND (CALL_YEAR, CALL_SEQ, VSL_CD) IN (
                	SELECT 
                		CALL_YEAR, CALL_SEQ, VSL_CD
					FROM TMT_VSL_SCH
					WHERE VSL_CALL_ID = A.VSL_CALL_ID
				)
			) AS ogaApprovalBy
   	 	FROM TMT_VSL_SCH A,
		TMT_VSL_PART B,
		TMT_AGENCY_INFO D
		<if test="locCd == 'BBT'">
			,TMT_BERTH_LOC E
		</if>
     	WHERE A.VSL_CD = B.VSL_CD 
		AND A.ARRV_SA_ID = D.AGENCY_CODE 
		AND D.ptnr_type = 'SHA'
		AND A.SUMMIT_STAT &lt;&gt; 'CC'	/* Added by Phuong Do, 20110713, MantisID : 0030586 */
		AND A.BERTH_LOC IN ( SELECT BERTH_CD FROM TMT_BERTH_LOC  WHERE LOC_CD ='BBT')
		<if test="etaFrom != null and etaFrom != ''">
            AND A.ETA &gt;= TO_DATE(#{etaFrom},'DD/MM/YYYY')
		</if>				
		<if test="etaTo != null and etaTo != ''">
            AND A.ETA &lt; TO_DATE(#{etaTo},'DD/MM/YYYY')+1
		</if>		
		<if test="vslCallId != null and vslCallId != ''">
			 AND A.VSL_CALL_ID = #{vslCallId}
		</if>
		<if test="atdYn == 'false'">
			AND A.ATD IS  NULL
		</if>
		<if test="locCd == 'BBT'">
		    AND A.BERTH_LOC = E.BERTH_CD
		    AND E.LOC_CD = 'BBT'
		</if>		
		<if test="alertYn != 'Y'">
			<if test="vslTp != null and vslTp != ''">
				AND B.VSL_TP = #{vslTp}
			</if>		
			<if test="cgTpCd != null and cgTpCd != ''">
				AND A.CARGO_TP_MPTS = #{cgTpCd}
			</if>						
			<if test="planned == 'PLN'">
				AND A.BERTH_PLAN_YN = 'Y'
			</if>		
			<if test="planned == 'NPN'">
				AND NVL(A.BERTH_PLAN_YN, 'N') = 'N'
			</if>		
			<if test="vslStatus != null and vslStatus != ''">
				AND ( A.MPTS_STAT = #{vslStatus}
				<if test="vslStatus == 'PD'">
	   				OR A.MPTS_STAT IS NULL
				</if>
	           	)
			</if>				
			<if test="dbYn == 'true'">
				AND F_GET_DB_YN(A.VSL_CALL_ID) = 'Y'
			</if>
		</if>
		<if test="alertYn != null and alertYn != ''">
			<if test="alertYn == 'Y'">
				<if test="alertTp == 'Berth32hrs'">
					AND A.VSL_CALL_ID IN (
						SELECT VSL_CALL_ID
						FROM TMT_VSL_SCH
						WHERE (ETA - SYSDATE)*24 &lt;= 32
			            AND ETA > SYSDATE
			            AND BERTH_PLAN_YN IS NULL
			            AND WHARF_MARK_FROM IS NULL
					)
				</if>
				<if test="alertTp == 'IVAdvice'">
	           		AND A.ARRV_SA_ID  = #{ptnrCode}
	                AND A.VSL_CALL_ID NOT IN (
                        SELECT A1.VSL_CALL_ID AS VSL_CALL_ID
                        FROM TMT_B_IV_ADV A1
                        WHERE PTNR_CD = #{ptnrCode} OR PAYER_CD = #{ptnrCode}
                	)
                	AND (SYSDATE - A.ETA) &lt;= 180
				</if>
			</if>
		</if>
    </select>
    
  	<select id="selectVesselScheduleDetail"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
  	<![CDATA[
        SELECT /*vesselScheduleInternal.selectVesselScheduleDetail*/
                A.VSL_CD                VSLCD,
                A.CALL_YEAR             CALLYEAR,
                A.CALL_SEQ              CALLSEQ,
                A.VSL_CALL_ID           VSLCALLID,
                A.SHIP_CALL_NO          SHIPCALLNO,
                A.BERTH_PLAN_YN         BERTHPLANYN,
                A.BERTH_LOC             BERTHLOC,
                A.SUMMIT_STAT           SUMMITSTAT,
                DECODE(A.SUMMIT_STAT, 'RC', '','CC','Cancelled',F_CM_012('MT', 'DOCSTAT', A.SUMMIT_STAT)) SUMMITSTATNAME,
                A.DEPT_TP               DEPTTP,
                A.VC_DIV                VCDIV,
                A.ETA    ETA,
                A.ETD    ETD,
                A.ETW    ETW,
                A.ETB    ETB,
                A.ETC    ETC,
                A.ETU    ETU,
                A.ATA    ATA,
                A.ATD    ATD,
                A.ATB    ATB,
               	F_GET_CUR_ATB(A.VSL_CALL_ID)    CURATB,
                A.ATU    ATU,
                A.ATC    ATC,
                A.ATW    ATW, 
                A.STOWW_YN              STOWWYN,
                A.ARMS_YN               ARMSYN,
                A.ADV_IMMG_YN           ADVIMMGYN,
                A.BTR    BTR,                 
                A.DRF_ARRV              DRFARRV,
                A.DRF_DEPTR             DRFDEPTR,
                A.INB_SERV_LANE         INBSERVLANE,
                A.OUTB_SERV_LANE        OUTBSERVLANE,
                A.YOT                   YOT,
                A.YCT                   YCT,
                TO_CHAR(A.UPDATE_TIME,'DD/MM/YYYY HH24:MI')    INSDTM,
                A.STAFF_CD           INSUSERID,
                A.UPDATE_TIME               UPDDTM,
                A.STAFF_CD           UPDUSERID,
                A.ARRV_SA_ID            ARRVSAID,
                (SELECT ENG_SNM FROM TMT_AGENCY_INFO WHERE AGENCY_CODE = A.ARRV_SA_ID and rownum=1) as ARRVSANM,
                (SELECT ACC_NO FROM TMT_AGENCY_INFO WHERE AGENCY_CODE = A.ARRV_SA_ID and rownum=1) as ACCNO,
                A.DEPR_SA_ID            DEPRSAID,
                A.VSL_OPERATOR          VSLOPERATOR,
                A.PILOT_ONBOARD         PILOTONBOARD,
                A.PILOT_DISEMBARK       PILOTDISEMBARK,
                A.BERTH_ALONGSIDE       BERTHALONGSIDE,
                A.APPROVE_USER_ID       APPROVEUSERID,
                A.APPROVE_DTM           APPROVEDTM,
                A.BERTH_DIV             BERTHDIV,
                A.LOAD_CARGO            LOADCARGO,
                A.DISCH_CARGO           DISCHCARGO,
                A.LOAD_CARGO_QTY        LOADCARGOQTY,
                A.DISCH_CARGO_QTY       DISCHCARGOQTY,
                A.SHIFT_CARGO_QTY       SHIFTCARGOQTY,
                A.SUBMIT_RMK            SUBMITRMK,
                A.DOMESTIC_CHK			DOMESTICCHK,
                TO_CHAR(NVL(A.WHARF_MARK_FROM,0)) WHARFMARKFROM,
                CASE WHEN NVL(A.WHARF_MARK_TO,0) = 0 THEN NVL(A.WHARF_MARK_FROM, 0) ELSE 0 END
                +
                CASE WHEN NVL(A.WHARF_MARK_TO,0) = 0 THEN NVL(B.LOA, 0) ELSE NVL(A.WHARF_MARK_TO,0) END  WHARFMARKTO,
                B.INMARSAT_NO           INMARSATNO,
                B.MMSI_CD               MMSICD,
                B.VSL_NM                VSLNM,
                B.BLD_YEAR              BLDYEAR,
                B.SHIP_OFFICIAL_NO      SHIPOFFICIALNO,
                B.VSL_TP1_VSL           VSLTP1VSL,
                B.VSL_TP2_TERM          VSLTP2TERM,
                B.VSL_TP3_TRADE         VSLTP3TRADE,
                B.DOM_YN                DOMYN,
                B.CALL_SIGN             CALLSIGN,
                B.VSL_FLAG_CD           VSLFLAGCD,
                B.CNTRY_CD              CNTRYCD,
                B.VSL_TP                VSLTP,
                NVL((SELECT LOC_CD FROM TMT_BERTH_LOC WHERE BERTH_CD = A.BERTH_LOC),'N') AS bbtLoc,
                F_CM_012('VC', 'VSLTP', B.VSL_TP) AS VSLTPNM,
                B.VSL_REG_PORT          VSLREGPORT,
                B.REG_DT                REGDT,
                B.VSL_CUST_CD           VSLCUSTCD,
                B.SA_CUST_CD            SACUSTCD,
                B.IMO_NO                IMONO,
                B.CLASS                 VCLASS,
                B.LST_DRYDOCK           LSTDRYDOCK,
                B.LOA                    LOA,
                B.LBP                   LBP,
                B.VSL_WIDTH             VSLWIDTH,
                B.VSL_MX_WIDTH          VSLMXWIDTH,
                B.VSL_DEPTH             VSLDEPTH,
                B.SUMM_DRF              SUMMDRF,
                B.TOP_TIER              TOPTIER,
                B.ANTN_HGT              ANTNHGT,
                B.BOW_DIST              BOWDIST,
                B.STERN_DIST            STERNDIST,
                B.DISP                  DISP,
                B.FLOAT_CRANE_YN        FLOATCRANEYN,
                B.CRANE_SIDE            CRANESIDE,
                B.ALONG_SIDE            ALONGSIDE,
                B.ISSC_NO               ISSCNO,
                B.NRT                   NRT,
                B.GRT                   GRT,
                B.DWT                   DWT,
                B.BALE_CAPA             BALECAPA,
                B.GRAIN_CAPA            GRAINCAPA,
                B.ENG_DESC              ENGDESC,
                B.ENG_BHP               ENGBHP,
                B.SPEED                 SPEED,
                B.MX_TEU                MXTEU,
                B.HATCH_QTY             HATCHQTY,
                B.MX_ROW_DECK           MXROWDECK,
                B.MX_ROW_HOLD           MXROWHOLD,
                B.STAT_CD        		STATCD,
                B.NAT_CD                NATCD,
                B.SERV_TP               SERVTP,
                B.VHF_YN                VHFYN,
                B.VSL_OUTR              VSLOUTR,
                B.LAUNCH_DT             LAUNCHDT,
                B.OUTR                  OUTR,
                B.VSL_DIV               VSLDIV,
                B.SA_CORP_ID            SACORPID,
                B.CREW_NO               CREWNO,
                B.NAV_EQU               NAVEQU,
                B.BUNKER_COND           BUNKERCOND,
                B.CONSUM_SEA            CONSUMSEA,
                B.FRESHWT_COND          FRESHWTCOND,
                B.APPRX_DIST            APPRXDIST,
                B.TOWING_SPEED          TOWINGSPEED,
                B.COMPTY_OFFICER        COMPTYOFFICER,
                B.TRAD_CERTI            TRADCERTI,
                B.TOWING_EQ             TOWINGEQ,
                B.CONFIRM_USER_ID       CONFIRMUSERID,
                B.CONFIRM_DTM           CONFIRMDTM,
                B.SHIP_GEAR             SHIPGEAR,
                B.RPM_TYPE              RPMTYPE,
                B.REMARKS               REMARKS,
                B.TERMINAL_TYPE         TERMINALTYPE,
                B.VSL_TP_TRADE          VSLTPTRADE,
                B.SHIPPING_LINE_CD      SHIPPINGLINECD,
                C.SUMIT_DT    SUMITDT,
                DECODE(C.SUMIT_DT,NULL,'NO','','NO','YES') CONFIRM,                
                (
                	CASE 
						WHEN (
							(
                            	NVL(A.DG_GOOD_YN,'N') NOT IN 'Y' AND (
                                	(((A.ETA-A.UPDATE_TIME)*24) >= 48 AND C.SUMIT_DT IS NULL)
                            		OR
                                 	(((A.ETA-A.UPDATE_TIME)*24) >= 48 AND ((A.ETA-C.SUMIT_DT)*24) >= 24)
                            	)
                        	)
                        	OR
                        	(
	                            NVL(A.DG_GOOD_YN,'N') IN 'Y' 
	                            AND ( (A.ETA-A.UPDATE_TIME) < 30 OR (A.ETA-A.UPDATE_TIME) > 45 )
                            	AND (
                                	(((A.ETA-A.UPDATE_TIME)*24) >= 48 AND C.SUMIT_DT IS NULL)
                            		OR
                                 	(((A.ETA-A.UPDATE_TIME)*24) >= 48 AND ((A.ETA-C.SUMIT_DT)*24) >= 24)
                            	)
                        	)
                        ) THEN 'NORMAL MATURED'
                      	WHEN (
                      		(
                            	NVL(A.DG_GOOD_YN,'N') NOT IN 'Y' AND (
                                	(((A.ETA-A.UPDATE_TIME)*24) < 48 AND C.SUMIT_DT IS NULL)
                            		OR
                                 	(((A.ETA-A.UPDATE_TIME)*24) < 48 OR ((A.ETA-C.SUMIT_DT)*24) < 24)
                            	)
                        	)                
                        	OR    
                        	(
                            	NVL(A.DG_GOOD_YN,'N') IN 'Y' AND (
                            		(A.ETA-A.UPDATE_TIME) < 30 OR (A.ETA-A.UPDATE_TIME) > 45 )
                            	AND (
                                	(((A.ETA-A.UPDATE_TIME)*24) < 48 AND C.SUMIT_DT IS NULL)
                            		OR
                                 	(((A.ETA-A.UPDATE_TIME)*24) < 48 OR ((A.ETA-C.SUMIT_DT)*24) < 24)
                            	)
                        	)
                        ) THEN 'NORMAL NON-MATURED'
                     	WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y' 
                     		AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 
                     		AND 45 AND C.SUMIT_DT IS NULL
						THEN 'SCHEDULE'
						WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y'       
							AND C.SUMIT_DT IS NOT NULL  
							AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45
							AND A.ETA-C.SUMIT_DT >= 3                                             
						THEN 'SCHEDULE MATURED'
						WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y'       
						    AND C.SUMIT_DT IS NOT NULL  
						    AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45
						    AND A.ETA-C.SUMIT_DT < 3                      
						THEN 'SCHEDULE NON MATURED'
						ELSE 'NORMAL MATURED'
                	END
                ) AS STATUS,
                (
                	CASE 
						WHEN (
							(
                            	NVL(A.DG_GOOD_YN,'N') NOT IN 'Y' AND (
                                	(((A.ETA-A.UPDATE_TIME)*24) >= 48 AND C.SUMIT_DT IS NULL)
                           			OR
                                 	(((A.ETA-A.UPDATE_TIME)*24) >= 48 AND ((A.ETA-C.SUMIT_DT)*24) >= 24)
                            	)
                        	)
                        	OR
                       		(
	                            NVL(A.DG_GOOD_YN,'N') IN 'Y' AND (
	                            	(A.ETA-A.UPDATE_TIME) < 30 OR (A.ETA-A.UPDATE_TIME) > 45 )
                            	AND (
                                (((A.ETA-A.UPDATE_TIME)*24) >= 48 AND C.SUMIT_DT IS NULL)
                            	OR
                                (((A.ETA-A.UPDATE_TIME)*24) >= 48 AND ((A.ETA-C.SUMIT_DT)*24) >= 24)
                            )
                        )
					) THEN 'NRM'
					WHEN (
						(
                            NVL(A.DG_GOOD_YN,'N') NOT IN 'Y' AND (
                                (((A.ETA-A.UPDATE_TIME)*24) < 48 AND C.SUMIT_DT IS NULL)
                            	OR
                                (((A.ETA-A.UPDATE_TIME)*24) < 48 OR ((A.ETA-C.SUMIT_DT)*24) < 24)
                            )
                        )
                        OR
                        (
                            NVL(A.DG_GOOD_YN,'N') IN 'Y' AND (
                            	(A.ETA-A.UPDATE_TIME) < 30 OR (A.ETA-A.UPDATE_TIME) > 45 )
                            AND (
                                (((A.ETA-A.UPDATE_TIME)*24) < 48 AND C.SUMIT_DT IS NULL)
                            	OR
                                (((A.ETA-A.UPDATE_TIME)*24) < 48 OR ((A.ETA-C.SUMIT_DT)*24) < 24)
                            )                     
                        )
					) THEN 'NNM'
                    WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y' 
						AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45 
						AND C.SUMIT_DT IS NULL
					THEN 'SCH'
					WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y'       
						AND C.SUMIT_DT IS NOT NULL  
						AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45
						AND A.ETA-C.SUMIT_DT >= 3                                             
                    THEN 'SLM'
                    WHEN NVL(A.DG_GOOD_YN,'N') IN 'Y'       
						AND C.SUMIT_DT IS NOT NULL  
						AND (A.ETA-A.UPDATE_TIME) BETWEEN 30 AND 45
						AND A.ETA-C.SUMIT_DT < 3                      
					THEN 'SNM'
					ELSE 'NRM'
                END) AS SCHSTATUS,
                DECODE(C.SUMIT_DT, NULL, '', 'SUBMIT') CONFIRMATIONSLIP,
                DECODE(C.SUMIT_DT, NULL, '', 'Y') CSYN,
                A.DG_GOOD_YN    DGGOODYN,
                F_GET_DG_STATUS(A.VSL_CALL_ID, A.VSL_CD, A.CALL_YEAR, A.CALL_SEQ) DGSTATUS,
                F_GET_DG_DECLARATION(A.VSL_CALL_ID, A.VSL_CD, A.CALL_YEAR, A.CALL_SEQ, B.VSL_TP) DGDECLARATION,
                (SELECT SUM(CG_WGT) WGT FROM TMT_CONFM_SLP_DTL WHERE VSL_CALL_ID = A.VSL_CALL_ID) MT,
                F_GET_COMODITY( A.VSL_CALL_ID)                              AS comodityCode,
                F_GET_OPE_TP(A.VSL_CALL_ID) OPERATIONTYPE,
                (SELECT SUM(OPE_HR) FROM TMT_CONFM_SLP_DTL WHERE VSL_CALL_ID = A.VSL_CALL_ID) OPEHR,
                F_GET_VSL_COLOR(A.VSL_CALL_ID, A.ETA, C.SUMIT_DT, A.ARRV_SA_ID)     VSLCOLOR,
                A.STAFF_CD SALOGINID,
                DECODE(C.FILE_CATG_CD, NULL, 'N', 'Y') STOWAGEPLAN,
                A.BERTH_APRV_USER_ID    BERTHAPRVUSERID,
                A.PURP_CALL PURPCALLCD,
                F_CM_012('VC', 'POC', A.PURP_CALL) PURPCALL
                ,A.BERTH_LABEL as berthLabel
                ,A.VSL_CALL_ID AS motherVslCallId
                ,DECODE (DB.DBL_BNK_SHIP1, NULL, 'N', 'Y') AS dbYn
                ,DB.DBL_BNK_SHIP1 AS dbVslCallId
        FROM 	TMT_VSL_SCH A
            	LEFT OUTER JOIN TMT_VSL_PART B ON  A.VSL_CD = B.VSL_CD
            	LEFT OUTER JOIN TMT_CONFM_SLP C ON A.VSL_CALL_ID = C.VSL_CALL_ID 
            	LEFT OUTER JOIN TMT_DBL_BNK DB ON A.VSL_CALL_ID = DB.VSL_CALL_ID
		WHERE 	A.VSL_CALL_ID = #{vslCallId}
				AND A.SUMMIT_STAT <> 'CC'	
		]]>
    </select>
      
	<select id="selectConfirmationSlip" parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
		SELECT /*vesselScheduleInternal.selectConfirmationSlip*/
			A.VSL_CALL_ID                       AS VSLCALLID, 
			A.SUMIT_DT                          AS SUMITDT, 
			A.OPE_TP_CD                         AS OPETPCD,
			A.SHRE_TK                           AS SHRETK,
			A.NOF_LINES                         AS NOFLINES,
			NVL(A.DSCH_HOSE_QTY,0)              AS DSCHHOSEQTY, 
			NVL(A.LOAD_HOSE_QTY,0)              AS LOADHOSEQTY, 
			NVL(A.DSCH_ARM_QTY,0)               AS DSCHARMQTY, 
			NVL(A.LOAD_ARM_QTY,0)               AS LOADARMQTY, 
			A.TEMP_REDY_DT 						AS TEMPREDYDT, 
			A.DOC_REDY_DT  						AS DOCREDYDT, 
			A.CG_REDY_DT   						AS CGREDYDT, 
			A.ULTG_REDY_DT 						AS ULTGREDYDT, 
			A.TK_REDY_DT   						AS TKREDYDT, 
			A.FILE_CATG_CD                      AS FILECATGCD
		FROM TMT_CONFM_SLP A              
		WHERE A.VSL_CALL_ID = #{vslCallId}
	</select>
	
	<select id="selectConfirmationSlipDetail"  parameterType="vesselScheduleParm" resultMap="ConfirmationSlipDetailMap"> 
		SELECT /*vesselScheduleInternal.selectConfirmationSlipDetail*/
			A.VSL_CALL_ID                        	AS VSLCALLID, 
			B.SEQ                                	AS SEQ, 
			B.CG_TP_CD                           	AS CGTPCD, 
			NVL(B.OPE_TP_CD,' ')                 	AS OPETPCD,
			(
				SELECT S_CD_NM FROM TMT_CD_MSTD 
				WHERE L_CD='MT' AND M_CD='CGTP' 
			    AND S_CD=B.CG_TP_CD
			)               					 	AS CGTPNM, 
			NVL(B.CMDT_CD,' ')                   	AS CMDTCD, 
			(
				SELECT CMDT_DESC FROM TMT_CMDT 
			  	WHERE CMDT_CD = B.CMDT_CD
			)           AS CMDTCDNM, 
			NVL(B.PKG_TP_CD,' ')				 	AS PKGTPCD,
			NVL(B.OPE_HR,0)                        	AS OPEHR, 
			NVL(B.WORK_DD,0)                       	AS WORKDD, 
			NVL(B.WORK_HATCH_NO,' ')               	AS WORKHATCHNO, 
			DECODE(B.CG_WGT,0,'0',DECODE(TRUNC(B.CG_WGT),0, '0' || TO_CHAR(B.CG_WGT), TO_CHAR(B.CG_WGT))) WGT, 
			NVL(B.QTY,0)                           	AS QTY, 
			B.CLN_CD                               	AS CLNCD, 
			B.TOP_CG_CD                            	AS TOPCGCD, 
			(
				CASE 
					WHEN B.CLN_CD='Y' THEN 'CLEAN' 
					WHEN B.TOP_CG_CD ='Y' THEN 'TOP' 
					ELSE '' 
				END 
			)						  				AS TOPCLN,
			B.TMNL_OPR                             	AS TMNLOPR, 
			B.SHPR_CNSNE                           	AS SHPRCNSNE, 
			B.CNSNE                           	  	AS CNSNE, 
			B.UNNO                                 	AS UNNO, 
			B.IMDG                                 	AS IMDG,
			B.POL	                              	AS POL, 
			B.FDEST                                	AS FDEST, 
			NVL(B.CRC,0)                           	AS CRC, 
			NVL(B.BL_NO,' ')                       	AS BLNO,
			B.CG_OPT_TP_CD                         	AS CGOPTTPCD,
			F_CM_012('MT', 'CGOPETP', B.CG_OPT_TP_CD) AS CGOPTTPNM,
			B.DG_SEQ								AS DGSEQ,
			(
				CASE 
					WHEN C.SEQ IS NULL THEN 'N'
					ELSE 'Y'
				END
			) 								  		AS DGCHK,
			OPE_CATEGORY                          	AS OPETYPE,
			B.DELV_TP_CD							AS DELVTPCD,
			B.RMK									AS REMARK,
			DECODE(B.DELV_TP_CD,
				'D', 'Direct',
				'I', 'indirect',
				'' )								AS DELVTPNM
		FROM TMT_CONFM_SLP A, TMT_CONFM_SLP_DTL B, TMT_DG C 
		WHERE A.VSL_CALL_ID = B.VSL_CALL_ID
		AND B.DG_SEQ = C.SEQ(+)
		AND A.VSL_CALL_ID = #{vslCallId}
		<if test="cargoType != 'LIQUID'">
			AND B.CG_TP_CD IN ('BBK','DBE','DBN', 'CTR')
		</if>
		<if test="cargoType == 'LIQUID'">
			AND B.CG_TP_CD IN ('LQE','LQN', 'LQD')
		</if>
	</select>
	
	<select id="selectVORLiquidCargo"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
		SELECT /*vesselScheduleInternal.selectVORLiquidCargo*/
			LQ.VSL_CALL_ID                                            AS VSLCALLID
			,TO_CHAR(TO_DATE(LQ.WORK_YMD,'YYYYMMDD'),'DD/MM/YYYY')     AS WORKYMD
			,LQ.SHFT_ID                                                AS SHFTID
			,LQ.OPE_TP                                                 AS OPETP
			,LQ.JOB_TP_CD                                              AS JOBTPCD
			,LQ.SEQ                                                    AS SEQ
			,LQ.CG_TP_CD                                               AS CGTPCD
			,LQ.HOSE_TP_CD                                             AS HOSETPCD
			,LQ.TK_OPR                                                 AS TKOPR
			,LQ.SHPR                                                   AS SHPR
			,NVL(LQ.CNSNE, ' ')                                        AS CNSNE
			,LQ.TON_HDL_AMT                                            AS TONHDLAMT
			,LQ.PUMP_RATE                                              AS PUMPRATE
			,NVL(TO_CHAR(LQ.ST_DT,'DD/MM/YYYY HH24:MI'), ' ')          AS STDT
			,NVL(TO_CHAR(LQ.END_DT,'DD/MM/YYYY HH24:MI'), ' ')         AS ENDDT
			,LQ.JOB_CMPL_YN                                            AS JOBCMPLYN
			,NVL(TO_CHAR(LQ.HOSE_ON_DT,'DD/MM/YYYY HH24:MI'), ' ')     AS HOSEONDT
			,NVL(TO_CHAR(LQ.HOSE_OFF_DT,'DD/MM/YYYY HH24:MI'), ' ')    AS HOSEOFFDT
			,LQ.HOSE_CMPL_YN                                           AS HOSECMPLYN
			,NVL(LQ.CMDT_CD, ' ')                                      AS CMDTCD
			,NVL(LQ.PKG_TP_CD, ' ')                                    AS PKGTPCD
            ,DECODE (#{opeTp, jdbcType=VARCHAR}, 
                 'GEN', NVL (SLPT.LOADPLANMTG, 0),
                 'STS', NVL (SLPT.LOADPLANMTS, 0),
                 'TLS', NVL (SLPT.LOADPLANMTT, 0))    AS LOADPLANMT
            ,DECODE (#{opeTp, jdbcType=VARCHAR},
                 'GEN', NVL (SLPT.DISPLANMTG, 0),
                 'STS', NVL (SLPT.DISPLANMTS, 0),
                 'TLS', NVL (SLPT.DISPLANMTT, 0))     AS DISPLANMT
            ,DECODE(#{opeTp, jdbcType=VARCHAR},
                    'GEN', NVL(LQTOTAL.LOADACTUALMTG,0),
                    'STS', NVL(LQTOTAL.LOADACTUALMTS,0),
                    'TLS', NVL(LQTOTAL.LOADACTUALMTT,0))               AS LOADACTUALMT
            ,DECODE(#{opeTp, jdbcType=VARCHAR},
                    'GEN', NVL(LQTOTAL.DISACTUALMTG,0),
                    'STS', NVL(LQTOTAL.DISACTUALMTS,0),
                    'TLS', NVL(LQTOTAL.DISACTUALMTT,0))                AS DISACTUALMT
            ,DECODE(LQ.JOB_TP_CD, 
                    'GEN',NVL(LQ.TON_HDL_AMT,0),
                    'STS',NVL(LQ.TON_HDL_AMT,0),
                    'TLS',NVL(LQ.TON_HDL_AMT,0),0)                      AS LOADTOTMT
            ,DECODE(LQ.JOB_TP_CD, 
                    'GEN',NVL(LQ.TON_HDL_AMT,0),
                    'STS',NVL(LQ.TON_HDL_AMT,0),
                    'TLS',NVL(LQ.TON_HDL_AMT,0),0)                      AS DISTOTMT
            ,(NVL(RPT.LOAD_HOSE_QTY,0) + NVL(RPT.DSCH_HOSE_QTY,0))     AS FLXTOTLINE
            ,(NVL(RPT.LOAD_ARM_QTY,0) + NVL(RPT.DSCH_ARM_QTY,0))       AS ARMTOTLINE
            ,RPT.FENDER                                                AS FENDER
            ,NVL(LQ.LINE_NO, 0)										  AS LINENO
			,(SELECT BL_NO FROM TMT_CONFM_SLP_DTL SLP where SLP.VSL_CALL_ID  = LQ.VSL_CALL_ID  AND ROWNUM = 1) AS BLNO
		FROM TMT_LQDCG_OPE LQ, TMT_LQDCG_OPE_MST RPT, (
			SELECT 
				SLP.VSL_CALL_ID,
				SUM(DECODE(SLP.CG_OPT_TP_CD, 'LD', NVL(SLP.CG_WGT,0) ,0)) AS LOADPLANMTG,
				SUM(DECODE(SLP.CG_OPT_TP_CD, 'DS', NVL(SLP.CG_WGT,0) ,0)) AS DISPLANMTG,
				SUM(DECODE(SLP.CG_OPT_TP_CD, 'SL', NVL(SLP.CG_WGT,0) ,0)) AS LOADPLANMTS,
				SUM(DECODE(SLP.CG_OPT_TP_CD, 'SD', NVL(SLP.CG_WGT,0) ,0)) AS DISPLANMTS,
				SUM(DECODE(SLP.CG_OPT_TP_CD, 'TL', NVL(SLP.CG_WGT,0) ,0)) AS LOADPLANMTT,
				SUM(DECODE(SLP.CG_OPT_TP_CD, 'TD', NVL(SLP.CG_WGT,0) ,0)) AS DISPLANMTT
			FROM TMT_CONFM_SLP_DTL SLP
			WHERE SLP.VSL_CALL_ID = #{vslCallId}
			GROUP BY VSL_CALL_ID
		) SLPT, (
			SELECT 
				OPESUM.VSL_CALL_ID,
				SUM(DECODE(OPESUM.JOB_TP_CD, 'LD', NVL(OPESUM.TON_HDL_AMT,0) ,0)) AS LOADACTUALMTG,
				SUM(DECODE(OPESUM.JOB_TP_CD, 'DS', NVL(OPESUM.TON_HDL_AMT,0) ,0)) AS DISACTUALMTG,
				SUM(DECODE(OPESUM.JOB_TP_CD, 'SL', NVL(OPESUM.TON_HDL_AMT,0) ,0)) AS LOADACTUALMTS,
				SUM(DECODE(OPESUM.JOB_TP_CD, 'SD', NVL(OPESUM.TON_HDL_AMT,0) ,0)) AS DISACTUALMTS,
				SUM(DECODE(OPESUM.JOB_TP_CD, 'TL', NVL(OPESUM.TON_HDL_AMT,0) ,0)) AS LOADACTUALMTT,
				SUM(DECODE(OPESUM.JOB_TP_CD, 'TD', NVL(OPESUM.TON_HDL_AMT,0) ,0)) AS DISACTUALMTT
				FROM TMT_LQDCG_OPE OPESUM
			WHERE OPESUM.VSL_CALL_ID = #{vslCallId}
			GROUP BY OPESUM.VSL_CALL_ID
		) LQTOTAL
        WHERE SLPT.VSL_CALL_ID = RPT.VSL_CALL_ID(+)
		AND RPT.VSL_CALL_ID = LQ.VSL_CALL_ID(+) 
		AND RPT.WORK_YMD =LQ.WORK_YMD(+)
		AND RPT.SHFT_ID= LQ.SHFT_ID (+)
		AND RPT.OPE_TP= LQ.OPE_TP (+)
		AND SLPT.VSL_CALL_ID = RPT.VSL_CALL_ID(+) 
		AND SLPT.VSL_CALL_ID = #{vslCallId}
		<if test="workYmd != null and workYmd != ''">
			AND RPT.WORK_YMD(+)= TO_CHAR(TO_DATE(#{workYmd}, 'DD/MM/YYYY'), 'YYYYMMDD')
		</if>            
		<if test="shift != null and shift != ''">
			AND RPT.SHFT_ID(+)= #{shift}
		</if>
		<if test="opeTp != null and opeTp != ''">
			AND RPT.OPE_TP(+)= #{opeTp}
		</if>
		
		<if test="searchType != 'AMT_INFO'">
			AND LQ.VSL_CALL_ID IS NOT NULL
		</if>
	</select>
		
	<select id="selectConfirmationSlipOperationType"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
		SELECT /*vesselScheduleInternal.selectConfirmationSlipOperationType*/
			(
			   	CASE opeTpCd 
				   	WHEN 'BK' THEN opeTpCd 
					WHEN 'SS' THEN opeTpCd
					ELSE cgOpTp
				END 
			) AS opeTpCd, 
			(
			   	CASE opeTpCd 
				   	WHEN 'BK' THEN opeTpNm 
					WHEN 'SS' THEN opeTpNm
					ELSE cgOpTpNm
				END 
			) AS opeTpNm
		FROM (
			SELECT 
				A.PURP_CALL AS opeTpCd
				,B.S_CD_NM  AS opeTpNm
				,A.CG_OP_TP AS cgOpTp
				,C.S_CD_NM  AS cgOpTpNm
				,A.VSL_CALL_ID
			FROM TMT_VSL_SCH A, (
				SELECT *
				FROM TMT_CD_MSTD
				WHERE M_CD = 'POC'
				AND L_CD = 'VC' 
			) B, (
				SELECT *
				FROM TMT_CD_MSTD
				WHERE M_CD = 'CGFZ'
				AND L_CD = 'VC' 
			) C
			WHERE A.VSL_CALL_ID = #{vslCallId}
			AND A.PURP_CALL = B.S_CD(+)
			AND A.CG_OP_TP = C.S_CD(+)
	   )
	</select>
	
	<select id="selectVesselInfo"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
		SELECT /*vesselScheduleInternal.selectVesselInfo*/
			VSL_CALL_ID 							AS vslCallId	
			,A.OUTB_VOY 							AS outbVoy 	
			,(
				SELECT S_CD_NM 
			  	FROM TMT_CD_MSTD SA 
				WHERE l_CD='VC' 
				AND M_CD='CGFZ' 
				AND S_CD = A.CG_OP_TP
			) 										AS cgOpTpNm 
			<!-- ,TO_CHAR(A.ETA,'DD/MM/YYYY HH24:MI') 	AS eta --> 		
			,B.VSL_NM 								AS vslNm
			,A.INB_VOY 								AS inbVoy
			,B.IMO_NO 								AS imoNo
			<!-- ,TO_CHAR(A.ETD,'DD/MM/YYYY HH24:MI') 	AS etd -->
			,B.CALL_SIGN 							AS callSign
			,A.ARRV_SA_ID 							AS arrvSaId 
			,(
				SELECT S_CD_NM 
			  	FROM TMT_CD_MSTD SA 
				WHERE L_CD='VC' 
				AND M_CD='VSLTP' 
				AND S_CD = B.VSL_TP
			) 										AS vslTpNm 
			,B.GRT 									AS grt
			,A.DRF_ARRV								AS drfArrv
			,A.DRF_DEPTR							AS drfDeptr
			,F_CM_012('VC', 'NATION', b.VSL_FLAG_CD) AS vslFlagCd
		FROM TMT_VSL_SCH A, TMT_VSL_PART B
		WHERE A.VSL_CD	= #{vslCd}
		AND A.CALL_YEAR = #{callYear}
		AND A.CALL_SEQ 	= #{callSeq}
		AND A.VSL_CD 	= B.VSL_CD	
	</select>
    
    <select id="selectBerthInfo"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
		SELECT /*vesselScheduleInternal.selectBerthInfo*/
			BERTH_TP BERTHTP,
			BERTH_CD BERTHCD,
			BERTH_CD BERTHNM, 
			PST_STA PSTSTA, 
			PST_END PSTEND, 
			LENGTH
		FROM TMT_BERTH_LOC
		WHERE BERTH_TP IN ('WRF','NDJ','EDJ')
		ORDER BY BERTH_CD
    </select>
    
    <select id="selectBerthValidation"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
		SELECT  CASE WHEN COUNT(VSL_CALL_ID) = 0 THEN 'Y' ELSE 'N' END AS isValidated
			FROM    TMT_VSL_SCH S
			WHERE   ATB IS NOT NULL
			        AND ATU IS NULL
			        AND BERTH_LOC = #{berthLoc}
			        AND VSL_CALL_ID != #{vslCallId}
    </select>
    
    <select id="selectVslTpCombo"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
		SELECT /*codeMaster.selectCodeMasterList*/
			M_CD AS MCD,
		 	S_CD AS SCD, 
			S_CD_NM AS SCDNM,
		    S_CD_DESC AS SCDDESC
		FROM TMT_CD_MSTD
		WHERE L_CD = 'VC' AND M_CD = 'VSLTP' AND S_CD_USE = 'Y' AND S_CD NOT IN ('SC1','SC2','SC3','SR1','SR2','SR3') AND STAFF_CD = 'MOSTADMIN'
    </select>
    
    <update id="updateItems_VesselDetail" parameterType="vesselScheduleItem">
		UPDATE	/*vesselScheduleInternal.updateItems_VesselDetail*/
		TMT_VSL_SCH SET 
			ETB			= #{etb},
			ETW			= #{etw},
			ETC			= #{etc},
			ETU			= #{etu},
			ETD			= #{etd},
			ATA			= #{ata},
			ATD			= #{atd},
			ATB			= #{atb},
			ATU			= #{atu},
			ATC			= #{atc},
			ATW			= #{atw},
			WHARF_MARK_FROM = TO_NUMBER(#{wharfMarkFrom}),
			BERTH_LOC = #{berthLoc},
			WHARF_MARK_TO = TO_NUMBER(#{wharfMarkTo}),
			UPDATE_TIME = sysdate,
			STAFF_CD = #{userId},
			BERTH_LABEL = #{berthLabel}
		WHERE VSL_CALL_ID = #{vslCallId}
    </update>
    
    <insert id="insertConfirmationSlipItems"  parameterType="vesselScheduleItem">
		INSERT 
		INTO TMT_CONFM_SLP (
			  VSL_CALL_ID 
			  ,SUMIT_DT 
			  ,OPE_TP_CD 
			  ,SHRE_TK 
			  ,NOF_LINES 
			  ,DSCH_HOSE_QTY 
			  ,LOAD_HOSE_QTY 
			  ,DSCH_ARM_QTY 
			  ,LOAD_ARM_QTY 
			  ,TEMP_REDY_DT 
			  ,DOC_REDY_DT 
			  ,CG_REDY_DT 
			  ,ULTG_REDY_DT 
			  ,TK_REDY_DT 
			  ,FILE_CATG_CD 
			  ,UPDATE_TIME
			  ,STAFF_CD
		) VALUES (
			#{vslCallId},
			sysdate, 
			#{opeTpCd}, 
			#{shreTk}, 
			#{nofLines}, 
			#{dschHoseQty},
			#{loadHoseQty},
			#{dschArmQty},
			#{loadArmQty},
			#{tempRedyDt},
			#{docRedyDt},
			#{cgRedyDt},
			#{ultgRedyDt},
			#{tkRedyDt},
			#{fileCatgCd}, 
			sysdate,
			#{userId}
		)
	</insert>
	
	<select id="selectConfirmationSlipCount"  parameterType="vesselScheduleParm" resultType="vesselScheduleItem">
		SELECT A.VSL_CALL_ID		VSLCALLID
		  FROM TMT_CONFM_SLP A
		 WHERE 	A.VSL_CALL_ID = #{vslCallId}
	</select>
	
	<update id="updateConfirmationSlipItems"  parameterType="vesselScheduleItem">
		UPDATE	TMT_CONFM_SLP
		   SET  SUMIT_DT        = sysdate,
		   		OPE_TP_CD       = #{opeTpCd},
		   		SHRE_TK         = #{shreTk}, 
		   		NOF_LINES       = #{nofLines}, 
		        DSCH_HOSE_QTY	= #{dschHoseQty},
		        LOAD_HOSE_QTY	= #{loadHoseQty},
		        DSCH_ARM_QTY	= #{dschArmQty},
		        LOAD_ARM_QTY	= #{loadArmQty},
		        TEMP_REDY_DT	= #{tempRedyDt},
		        DOC_REDY_DT		= #{docRedyDt},
		        CG_REDY_DT		= #{cgRedyDt},
		        ULTG_REDY_DT	= #{ultgRedyDt},
		        TK_REDY_DT		= #{tkRedyDt},
				FILE_CATG_CD	= #{fileCatgCd},
		        STAFF_CD		= #{userId},
		        UPDATE_TIME = sysdate
		 WHERE	VSL_CALL_ID = #{vslCallId}
	</update>
	
	<insert id="insertConfirmationSlipDetailItems" parameterType="vesselScheduleItem">
		INSERT INTO TMT_CONFM_SLP_DTL(			
			VSL_CALL_ID,
			SHIP_CALL_NO,
			SEQ,
			CG_TP_CD,
			OPE_TP_CD,
			CMDT_CD,
			OPE_HR,
			WORK_DD,
			WORK_HATCH_NO,
			CG_WGT,
			CG_VOL,
			QTY,
			PKG_TP_CD,
			CLN_CD,
			TOP_CG_CD,
			TMNL_OPR,
			SHPR_CNSNE,
			CNSNE,
			UNNO,
			IMDG,
			POL,
			FDEST,
			CRC,
			LORRY_NO,
			BL_NO,
			UPDATE_TIME,
			STAFF_CD,
			CG_OPT_TP_CD,
			DG_SEQ,
			OPE_CATEGORY,
			RMK,
			DELV_TP_CD
		) VALUES (
			#{vslCallId},
			#{shipCallNo},
			(SELECT NVL(MAX(SEQ),0)+1 FROM TMT_CONFM_SLP_DTL WHERE VSL_CALL_ID=#{vslCallId}),
			#{cgTpCd},
			#{opeTpCd},
			#{cmdtCd},
			#{opeHr},
			#{workDd},
			#{workHatchNo},
			#{wgt},
			#{msrmt},
			#{qty},
			#{pkgTpCd},
			#{clnCd},
			#{topCgCd},
			#{tmnlOpr},
			#{shprCnsne},
			#{cnsne},
			#{unno},
			#{imdg},
			#{pol},
			#{fdest},
			#{crc},
			#{tkNo},
			#{blNo},
			sysdate,
			#{userId},
			#{cgOptTpCd},
			#{dgSeq},
			#{opeType},
			#{remark},
			#{delvTpCd}
		)
	</insert>
	
	<update id="updateVesselDetailItem"  parameterType="vesselScheduleItem">
		UPDATE	TMT_VSL_SCH
		SET 	ETB			= #{etb},
				ETW			= #{etw},
				ETC			= #{etc},
				ETU			= #{etu},
				ETD			= #{etd},
				ATA			= #{ata},
				ATD			= #{atd},
				ATB			= #{atb},
				ATU			= #{atu},
				ATC			= #{atc},
				ATW			= #{atw},
				WHARF_MARK_FROM = TO_NUMBER(#{wharfMarkFrom}),
				BERTH_LOC 	= #{berthLoc},
				WHARF_MARK_TO	= TO_NUMBER(#{wharfMarkTo}),
				UPDATE_TIME	= sysdate,
				STAFF_CD = #{userId},
				BERTH_LABEL = #{berthLabel},
				DOMESTIC_CHK = #{domesticChk}
		WHERE	VSL_CALL_ID	= #{vslCallId}
    </update>
	
	<update id="updateConfirmationSlipDetailItems"  parameterType="vesselScheduleItem">
		UPDATE TMT_CONFM_SLP_DTL
		   SET CG_TP_CD         = #{cgTpCd},
		   	   OPE_TP_CD        = #{opeTpCd},
			   CMDT_CD          = #{cmdtCd},
			   OPE_HR           = #{opeHr},
			   WORK_DD          = #{workDd},
			   WORK_HATCH_NO    = #{workHatchNo},
			   CG_WGT           = #{wgt},
			   CG_VOL           = #{msrmt},
			   QTY              = #{qty},
			   PKG_TP_CD        = #{pkgTpCd},
			   CLN_CD           = #{clnCd},
			   TOP_CG_CD        = #{topCgCd},
			   TMNL_OPR         = #{tmnlOpr},
			   SHPR_CNSNE       = #{shprCnsne},
			   CNSNE       		= #{cnsne},
			   UNNO             = #{unno},
			   IMDG             = #{imdg},
			   POL              = #{pol},  
			   FDEST            = #{fdest},
			   CRC              = #{crc},
			   LORRY_NO			= #{tkNo},
			   BL_NO            = #{blNo},
			   STAFF_CD			= #{userId},
			   CG_OPT_TP_CD     = #{cgOptTpCd},
			   DG_SEQ 			= #{dgSeq},
			   OPE_CATEGORY 	= #{opeType},
			   RMK	 			= #{remark},
			   DELV_TP_CD 		= #{delvTpCd}
		WHERE VSL_CALL_ID = #{vslCallId}
		AND SEQ = #{seq}
	</update>
	
	<delete id="deleteConfirmationSlipDetailItems"  parameterType="vesselScheduleItem">
		DELETE TMT_CONFM_SLP_DTL
		WHERE VSL_CALL_ID = #{vslCallId}
		AND CG_TP_CD = #{cgTpCd} 
		AND SEQ = #{seq}
	</delete>
	
</mapper>
